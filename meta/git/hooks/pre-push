#!/bin/bash

# A hook script to verify what is about to be pushed.  Called by "git push"
# after it has checked the remote status, but before anything has been pushed.
# If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# To enable this hook, save or link this file at `.git/hooks/pre-push`.
#
# This prevents pushing of commits where the log message starts with "WIP" (work
# in progress) or "{fixup,squash}!" (Autosquash, see git-rebase(1)).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

# look for WIP at beginning or end of branch name
git rev-parse --symbolic-full-name --abbrev-ref HEAD \
	| grep -Eqi '^wip($|[^[:alpha:]])|(^|[^[:alpha:]])wip$'
is_wip_branch=$((! $?))

while read local_ref local_oid remote_ref remote_oid; do
	[ "$local_oid" != "$zero" ] || continue

	if [ "$remote_oid" = "$zero" ]; then
		# New branch, examine all commits
		range="$local_oid"
	else
		# Update to existing branch, examine new commits
		range="$remote_oid..$local_oid"
	fi

	# Check for WIP or auto{squash,fixup} commit
	pattern='^(WIP|(fixup|squash)!)'

	commits="$(git rev-list -E --oneline --grep "$pattern" "$range")"
	if [ -n "$commits" ] && ((!is_wip_branch)); then
		printf >&2 "$local_ref: Commits in progress:\n"
		printf >&2 "%s\n" "$commits"
		printf >&2 "Aborting push\n"
		exit 1
	fi
done

exit 0
