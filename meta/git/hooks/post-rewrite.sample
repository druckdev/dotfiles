#!/bin/sh

# This hook is invoked by commands that rewrite commits (git-commit(1) when
# called with --amend and git-rebase(1); however, full-history (re)writing tools
# like git-fast-import(1) or git-filter-repo typically do not call it!). Its
# first argument denotes the command it was invoked by: currently one of amend
# or rebase. Further command-dependent arguments may be passed in the future.
#
# The hook receives a list of the rewritten commits on stdin, in the format
#
#     <old-sha1> SP <new-sha1> [ SP <extra-info> ] LF
#
# The extra-info is again command-dependent. If it is empty, the preceding SP is
# also omitted. Currently, no commands pass any extra-info.
#
# The hook always runs after the automatic note copying (see
# "notes.rewrite.<command>" in git-config(1)) has happened, and thus has access
# to these notes.
#
# The following command-specific comments apply:
#
# rebase For the squash and fixup operation, all commits that were squashed are
# listed as being rewritten to the squashed commit. This means that there will
# be several lines sharing the same new-sha1.
#
#     The commits are guaranteed to be listed in the order that they were
#     processed by rebase.


# Escape all metacharacters in Perl Compatible Regex Expressions in a given
# string. See `CHARACTERS AND METACHARACTERS` in pcrepatterns(3)
echo "post-rewrite"

sanitize_pcre() {
	printf "%s" "$1" | sed -E 's/[\\^$.[|()?*+{]/\\&/g'
}

# Only handle rebase, skip amend
[ "$1" = "rebase" ] || exit 0

while read -r line; do
	old="${line%% *}"

	new="${line#* SP }"
	new="${new%% *}"

	# Start with a negative lookbehind that makes sure that we really match the
	# start of the hash id.
	regex="(?<![a-f0-9])"
	# Transform the old hash id into a regex that allows all abbreviated
	# lengths from 4. See for example:
	#
	#     e2b5c0aa9ffd -> e2b5(c(0(a(a(9(f(f(d)?)?)?)?)?)?)?)?
	regex+="$(echo "$old" | sed -E '
		s/.$/(&)?/
		: a
		s/^(.{4}[^(]*)([^(]\(.*)/\1(\2)?/
		t a
	')"
	# Followed by the subject, surrounded by optional quotes, followed by an
	# optional date. All together in parentheses. Theoretically the date can
	# have practically every format but here only the default value
	# `--date=short` of the `reference` format is handled. (See `PRETTY FORMATS`
	# in git-show(1))
	subject="$(sanitize_pcre "$(git show -s --format=%s "$old")")"
	regex+=' \("?'"$subject"'"?(, [0-9]{4}-[0-9]{2}-[0-9]{2})?\)'

	body="$(git show -s --format=%b "$")"
	grep -P "$"
done

# See:
# - https://www.kernel.org/doc/html/v4.10/process/submitting-patches.html#describe-your-changes
# - https://git-scm.com/docs/SubmittingPatches#describe-changes

exit 0
